class UserDecorator < ApplicationDecorator
  decorates :user

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end

  def as_json(*params)
    {
      name: model.display_name,
      id: model.id,
      private: false,
      link: "http://api.feedengine.com/feeds/#{model.display_name}",
      items: {
        pages: model.total_pages,
        first_page: "http://api.feedengine.com/feeds/#{model.display_name}/items?page=1",
        last_page: "http://api.feedengine.com/feeds/#{model.display_name}/items?page=#{model.total_pages}",
        most_recent: [
          TextPostDecorator.decorate(model.text_posts.first),
          ImagePostDecorator.decorate(model.image_posts.first),
          LinkPostDecorator.decorate(model.link_posts.first)
        ]
      },
      web_url: "http://#{model.display_name}.feedengine.com/"
    }
  end
end