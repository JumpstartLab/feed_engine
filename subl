diff --git a/Gemfile b/Gemfile
index d6c1e5c..a26ee3a 100644
--- a/Gemfile
+++ b/Gemfile
@@ -14,6 +14,7 @@ gem 'coffee-rails', '~> 3.2.1'
 gem 'twitter'
 gem 'omniauth-twitter'
 gem 'omniauth'
+gem 'delayed_job_active_record'
 gem 'jbuilder'
 
 group :production do
diff --git a/Gemfile.lock b/Gemfile.lock
index e2a70c7..e88dd99 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -72,6 +72,11 @@ GEM
       execjs
     coffee-script-source (1.3.1)
     commonjs (0.2.6)
+    delayed_job (3.0.2)
+      activesupport (~> 3.0)
+    delayed_job_active_record (0.3.2)
+      activerecord (> 2.1.0)
+      delayed_job (~> 3.0.0)
     diff-lcs (1.1.3)
     erubis (2.7.0)
     execjs (1.3.2)
@@ -244,6 +249,7 @@ DEPENDENCIES
   cane!
   capybara
   coffee-rails (~> 3.2.1)
+  delayed_job_active_record
   fabrication
   faker
   growl
diff --git a/Procfile b/Procfile
new file mode 100644
index 0000000..2f44d1c
--- /dev/null
+++ b/Procfile
@@ -0,0 +1 @@
+worker:  bundle exec rake jobs:work
diff --git a/app/models/subscription.rb b/app/models/subscription.rb
index 82e404b..ce13a02 100644
--- a/app/models/subscription.rb
+++ b/app/models/subscription.rb
@@ -15,6 +15,7 @@ class Subscription < ActiveRecord::Base
   attr_accessible :user_name, :provider, :uid, :user_id
 
   belongs_to :user
+  has_many :tweets
 
   def self.create_with_omniauth(auth, user)
     create! do |subscription|
@@ -24,4 +25,36 @@ class Subscription < ActiveRecord::Base
       subscription.user_id = user.id
     end
   end
+
+  def self.get_all_new_tweets
+    twitter_subscriptions.each do |t_subscription|
+      t_subscription.get_new_tweets
+    end
+    self.delay(:run_at => GET_TWEET_FREQUENCY.seconds.from_now).get_all_new_tweets
+  end
+
+  def get_new_tweets
+    new_tweets = []
+    i = 0
+    while true do
+      tweet = Twitter.user_timeline(self.user_name)[i]
+      if tweet.created_at > (Time.now - GET_TWEET_FREQUENCY)
+        new_tweets << tweet
+      else
+        break
+      end
+      i += 1
+    end
+    new_tweets.each do |new_tweet|
+      t = Tweet.create(subscription_id: self.id,
+                       body: new_tweet.text,
+                       created_at: new_tweet.created_at,
+                       poster_id: self.user_id
+                      )
+    end
+  end
+
+  def self.twitter_subscriptions
+    Subscription.where(provider: "twitter")
+  end
 end
diff --git a/app/models/tweet.rb b/app/models/tweet.rb
new file mode 100644
index 0000000..3601267
--- /dev/null
+++ b/app/models/tweet.rb
@@ -0,0 +1,10 @@
+class Tweet < ActiveRecord::Base
+  attr_accessible :body, :subscription_id, :poster_id, :created_at
+
+  belongs_to :subscription
+
+  def subscription
+    Subscription.find(subscription_id)
+  end
+
+end
diff --git a/app/models/user.rb b/app/models/user.rb
index 0268fda..0a070e2 100644
--- a/app/models/user.rb
+++ b/app/models/user.rb
@@ -12,14 +12,16 @@
 
 # Users of the site
 class User < ActiveRecord::Base
+  POST_TYPES = [Message, Link, Image, Tweet]
   has_secure_password
   has_many :messages, :foreign_key => 'poster_id'
   has_many :images, :foreign_key => 'poster_id'
   has_many :links, :foreign_key => 'poster_id'
+  has_many :subscriptions
+  has_many :tweets, :through => :subscriptions, :foreign_key => 'poster_id'
   has_many :items, :foreign_key => 'poster_id'
 
   default_scope order(:created_at)
-  has_many :subscriptions
 
   attr_accessible :email, :password, :password_confirmation, :display_name
 
@@ -43,7 +45,7 @@ class User < ActiveRecord::Base
 
   def posts
     posts = []
-    [Message, Link, Image].each do |post_type|
+    POST_TYPES.each do |post_type|
       post_collection = post_type.find_all_by_poster_id(self.id)
       posts = posts | post_collection
     end
diff --git a/app/views/users/_public.html.slim b/app/views/users/_public.html.slim
index fe3c90e..7943fd7 100644
--- a/app/views/users/_public.html.slim
+++ b/app/views/users/_public.html.slim
@@ -8,7 +8,7 @@ div.span4.offset4
   br
   - @posts.each do |post|
     p
-      - if post.is_a?(Message)
+      - if post.is_a?(Message) || post.is_a?(Tweet)
         = post.body
       - if post.is_a?(Link)
         h3= link_to post.url, post.url
diff --git a/config/application.rb b/config/application.rb
index 0150aa6..db38160 100644
--- a/config/application.rb
+++ b/config/application.rb
@@ -64,5 +64,9 @@ module FeedEngine
 
     # Version of your assets, change this if you want to expire all your assets
     config.assets.version = '1.0'
+
+    config.after_initialize do
+      Subscription.get_all_new_tweets
+    end
   end
 end
diff --git a/config/initializers/background_job_setup.rb b/config/initializers/background_job_setup.rb
new file mode 100644
index 0000000..b0ef875
--- /dev/null
+++ b/config/initializers/background_job_setup.rb
@@ -0,0 +1 @@
+GET_TWEET_FREQUENCY=300
diff --git a/config/routes.rb b/config/routes.rb
index 89bfdfb..7a1dbd4 100644
--- a/config/routes.rb
+++ b/config/routes.rb
@@ -1,6 +1,5 @@
 FeedEngine::Application.routes.draw do
-
-  get "posts/show"
+  match "/auth/:provider/callback" => "subscriptions#create"
 
   resources :subscriptions
   resources :messages
@@ -16,7 +15,6 @@ FeedEngine::Application.routes.draw do
   get "signup", to: "users#new", as: "signup"
   get "login", to: "sessions#new", as: "login"
   get "logout", to: "sessions#destroy", as: "logout"
-  match "/auth/:provider/callback" => "subscriptions#create"
 
   constraints :subdomain => 'api', :format => :json do
     match '/feeds/:display_name(.:format)' => 'api/users#show', as: "feed"
@@ -28,4 +26,4 @@ FeedEngine::Application.routes.draw do
   end
 
   root to: "home#index"
-end
\ No newline at end of file
+end
diff --git a/db/migrate/20120514202521_create_tweets.rb b/db/migrate/20120514202521_create_tweets.rb
new file mode 100644
index 0000000..fc95c05
--- /dev/null
+++ b/db/migrate/20120514202521_create_tweets.rb
@@ -0,0 +1,10 @@
+class CreateTweets < ActiveRecord::Migration
+  def change
+    create_table :tweets do |t|
+      t.integer :subscription_id
+      t.string :body
+
+      t.timestamps
+    end
+  end
+end
diff --git a/db/migrate/20120514225211_add_poster_id_to_tweets.rb b/db/migrate/20120514225211_add_poster_id_to_tweets.rb
new file mode 100644
index 0000000..6f98f98
--- /dev/null
+++ b/db/migrate/20120514225211_add_poster_id_to_tweets.rb
@@ -0,0 +1,5 @@
+class AddPosterIdToTweets < ActiveRecord::Migration
+  def change
+    add_column :tweets, :poster_id, :integer
+  end
+end
diff --git a/db/migrate/20120515012502_create_delayed_jobs.rb b/db/migrate/20120515012502_create_delayed_jobs.rb
new file mode 100644
index 0000000..e784160
--- /dev/null
+++ b/db/migrate/20120515012502_create_delayed_jobs.rb
@@ -0,0 +1,22 @@
+class CreateDelayedJobs < ActiveRecord::Migration
+  def self.up
+    create_table :delayed_jobs, :force => true do |table|
+      table.integer  :priority, :default => 0      # Allows some jobs to jump to the front of the queue
+      table.integer  :attempts, :default => 0      # Provides for retries, but still fail eventually.
+      table.text     :handler                      # YAML-encoded string of the object that will do work
+      table.text     :last_error                   # reason for last failure (See Note below)
+      table.datetime :run_at                       # When to run. Could be Time.zone.now for immediately, or sometime in the future.
+      table.datetime :locked_at                    # Set when a client is working on this object
+      table.datetime :failed_at                    # Set when all retries have failed (actually, by default, the record is deleted instead)
+      table.string   :locked_by                    # Who is working on this object (if locked)
+      table.string   :queue                        # The name of the queue this job is in
+      table.timestamps
+    end
+
+    add_index :delayed_jobs, [:priority, :run_at], :name => 'delayed_jobs_priority'
+  end
+
+  def self.down
+    drop_table :delayed_jobs
+  end
+end
diff --git a/db/schema.rb b/db/schema.rb
index 3daac19..5d1b4ea 100644
--- a/db/schema.rb
+++ b/db/schema.rb
@@ -13,6 +13,22 @@
 
 ActiveRecord::Schema.define(:version => 20120515012759) do
 
+  create_table "delayed_jobs", :force => true do |t|
+    t.integer  "priority",   :default => 0
+    t.integer  "attempts",   :default => 0
+    t.text     "handler"
+    t.text     "last_error"
+    t.datetime "run_at"
+    t.datetime "locked_at"
+    t.datetime "failed_at"
+    t.string   "locked_by"
+    t.string   "queue"
+    t.datetime "created_at",                :null => false
+    t.datetime "updated_at",                :null => false
+  end
+
+  add_index "delayed_jobs", ["priority", "run_at"], :name => "delayed_jobs_priority"
+
   create_table "images", :force => true do |t|
     t.text     "description"
     t.text     "url"
@@ -57,6 +73,14 @@ ActiveRecord::Schema.define(:version => 20120515012759) do
     t.datetime "updated_at", :null => false
   end
 
+  create_table "tweets", :force => true do |t|
+    t.integer  "subscription_id"
+    t.string   "body"
+    t.datetime "created_at",      :null => false
+    t.datetime "updated_at",      :null => false
+    t.integer  "poster_id"
+  end
+
   create_table "users", :force => true do |t|
     t.string   "email"
     t.string   "password_digest"
diff --git a/script/delayed_job b/script/delayed_job
new file mode 100755
index 0000000..edf1959
--- /dev/null
+++ b/script/delayed_job
@@ -0,0 +1,5 @@
+#!/usr/bin/env ruby
+
+require File.expand_path(File.join(File.dirname(__FILE__), '..', 'config', 'environment'))
+require 'delayed/command'
+Delayed::Command.new(ARGV).daemonize
diff --git a/spec/models/tweet_spec.rb b/spec/models/tweet_spec.rb
new file mode 100644
index 0000000..a826279
--- /dev/null
+++ b/spec/models/tweet_spec.rb
@@ -0,0 +1,5 @@
+require 'spec_helper'
+
+describe Tweet do
+  pending "add some examples to (or delete) #{__FILE__}"
+end
